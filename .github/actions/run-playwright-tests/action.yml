name: 'Run Playwright Tests'
description: 'Runs Playwright tests for specific folders in parallel'

inputs:
  test-folders:
    description: 'Comma-separated list of test folders to run (e.g., "tny,vogue")'
    required: true
    default: 'tny,vogue'
  parallel-workers:
    description: 'Number of parallel workers per folder'
    required: false
    default: '1'
  chargebee-key:
    description: 'Chargebee secret key'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Cache node dependencies
      uses: actions/cache@v4
      id: node-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      if: steps.node-cache.outputs.cache-hit != 'true'
      shell: bash
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
          **/node_modules/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      shell: bash
      run: npx playwright install --with-deps
      
    - name: Run Playwright tests in parallel
      shell: bash
      env:
        CHARGEBEE_SECRET_KEY_STAG: ${{ inputs.chargebee-key }}
      run: |
        IFS=',' read -ra FOLDERS <<< "${{ inputs.test-folders }}"
        
        for folder in "${FOLDERS[@]}"; do
          echo "Running tests for folder: $folder"
          npx playwright test tests/$folder/ --workers=${{ inputs.parallel-workers }} &
          pids+=($!)
        done
        
        # Wait for all parallel processes to complete
        for pid in "${pids[@]}"; do
          wait $pid
          status=$?
          if [ $status -ne 0 ]; then
            exit_code=$status
          fi
        done
        
        exit ${exit_code:-0}